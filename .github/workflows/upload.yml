#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Crave Builder
on:
  workflow_dispatch:
inputs:
      DEVICE_NAME:
        description: "Device's codename:"
        required: true
        default: "m23xq"
  
jobs:
  test:
    name: Upload from foss.crave.io
      # Change this to self-hosted after setting up devspace as github actions runner
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
    
      # Check-out in order to access the repository's files.
    - name: Check-out to repository
      uses: actions/checkout@v4

      # Generate 'git' credential in base of the workflow's author.
    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
        
      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
        mkdir -p $PROJECTFOLDER/.repo/manifests
        if [ "${DCDEVSPACE}" == "1" ]; then
          echo 'No need to set up crave, we are already running in devspace!'
        else
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
          cp crave.conf $PROJECTFOLDER
        fi
        if [[ -z "${{ secrets.CUSTOM_YAML }}" ]]; then
          cp crave.yaml $PROJECTFOLDER/.repo/manifests
          echo "No Custom Configuration Found, Using Template!"
        else
          touch $PROJECTFOLDER/.repo/manifests/crave.yaml || true
          echo "${{ secrets.CUSTOM_YAML }}" > $PROJECTFOLDER/.repo/manifests/crave.yaml
          echo "Custom Configuration Found!"
        fi
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

      # Upload '.zip's and '.img's directly from 'crave' ssh.
    - name: Upload build artifact(s)
      run: |
        cd $PROJECTFOLDER
        echo "${{ secrets.GITHUB_TOKEN }}" > token.txt
        crave push token.txt -d $(crave ssh -- pwd | grep -v Select | sed -s 's/\r//g')/
        crave ssh -- "bash /opt/crave/github-actions/upload.sh '${{ github.run_id }}' '${{ github.event.inputs.DEVICE_NAME }}'  '${{ github.repository }}' '${{ github.event.inputs.PRODUCT_NAME }}-${{ github.run_id }}'"
